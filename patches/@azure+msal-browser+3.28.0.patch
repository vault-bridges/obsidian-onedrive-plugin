diff --git a/node_modules/@azure/msal-browser/dist/network/FetchClient.mjs b/node_modules/@azure/msal-browser/dist/network/FetchClient.mjs
index bcc88be..0302545 100644
--- a/node_modules/@azure/msal-browser/dist/network/FetchClient.mjs
+++ b/node_modules/@azure/msal-browser/dist/network/FetchClient.mjs
@@ -10,7 +10,8 @@ import { getRequestFailed, noNetworkConnectivity, failedToParseResponse, postReq
  * Licensed under the MIT License.
  */
 /**
- * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
+ * This class implements the Fetch API for GET and POST requests. See more here:
+ * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
  */
 class FetchClient {
     /**
@@ -61,23 +62,25 @@ class FetchClient {
         let responseStatus = 0;
         let responseHeaders = {};
         try {
-            response = await fetch(url, {
+            response = await requestUrl({
+                url,
                 method: HTTP_REQUEST_TYPE.POST,
                 headers: reqHeaders,
                 body: reqBody,
             });
         }
         catch (e) {
+            console.error(e)
             throw createBrowserAuthError(window.navigator.onLine
                 ? postRequestFailed
                 : noNetworkConnectivity);
         }
-        responseHeaders = getHeaderDict(response.headers);
+        responseHeaders = response.headers;
         try {
             responseStatus = response.status;
             return {
                 headers: responseHeaders,
-                body: (await response.json()),
+                body: response.json,
                 status: responseStatus,
             };
         }
@@ -92,13 +95,13 @@ class FetchClient {
  */
 function getFetchHeaders(options) {
     try {
-        const headers = new Headers();
+        const headers = {};
         if (!(options && options.headers)) {
             return headers;
         }
         const optionsHeaders = options.headers;
         Object.entries(optionsHeaders).forEach(([key, value]) => {
-            headers.append(key, value);
+            headers[key] = value;
         });
         return headers;
     }
